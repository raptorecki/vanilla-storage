<?php
/**
 * Vanilla Storage - External Scan Importer
 *
 * This script provides a web interface to import scan data generated by the
 * external PowerShell script (scan_drive.ps1).
 */

require_once 'database.php';
require_once 'header.php'; // Includes header and navigation

// --- Helper Functions ---

/**
 * Parses the custom .ini file format to extract drive info and SMART data.
 * @param string $filePath Path to the .ini file.
 * @return array|null An array containing 'drive_info' and 'smart_data' or null on failure.
 */
function parse_ini_file_custom(string $filePath): ?array
{
    $content = file_get_contents($filePath);
    if ($content === false) {
        return null;
    }

    $driveInfo = parse_ini_string($content, true, INI_SCANNER_NORMAL);

    $smartData = null;
    if (preg_match('/--- SMART DATA START ---(.*?)
--- SMART DATA END ---/s', $content, $matches)) {
        $smartData = trim($matches[1]);
    }

    return [
        'drive_info' => $driveInfo['DriveInfo'] ?? null,
        'smart_data' => $smartData
    ];
}

// --- Page Logic ---

$errorMessage = null;
$successMessage = null;

// Fetch all drives for the dropdown menu
$allDrives = [];
try {
    $stmt = $pdo->query("SELECT id, an_serial, name, serial FROM st_drives ORDER BY name ASC");
    $allDrives = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (Exception $e) {
    $errorMessage = "Error fetching drive list: " . $e->getMessage();
}


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // 1. Validate all inputs
    if (!isset($_POST['drive_id']) || empty($_POST['drive_id'])) {
        $errorMessage = "Error: You must select a target drive.";
    } elseif (!isset($_FILES['csv_file']) || $_FILES['csv_file']['error'] !== UPLOAD_ERR_OK) {
        $errorMessage = "Error: CSV file upload failed. Please try again.";
    } else {
        $driveId = $_POST['drive_id'];
        $csvTmpPath = $_FILES['csv_file']['tmp_name'];
        $csvFileName = basename($_FILES['csv_file']['name']);

        // 2. Derive Serial from filename and validate against selected drive
        $serialFromFilename = preg_replace('/(.csv|.CSV)$/', '', $csvFileName);
        
        $stmt = $pdo->prepare("SELECT serial FROM st_drives WHERE id = ?");
        $stmt->execute([$driveId]);
        $serialFromDb = $stmt->fetchColumn();

        if (empty($serialFromFilename)) {
            $errorMessage = "Error: Could not determine serial number from CSV filename.";
        } elseif ($serialFromDb !== $serialFromFilename) {
            $errorMessage = "Error: Serial number mismatch. The selected drive's serial ('{$serialFromDb}') does not match the serial from the CSV filename ('{$serialFromFilename}').";
        } else {
            // --- Begin Import Process ---
            try {
                $pdo->beginTransaction();

                // 3. Process optional INI file
                if (isset($_FILES['ini_file']) && $_FILES['ini_file']['error'] === UPLOAD_ERR_OK) {
                    $iniData = parse_ini_file_custom($_FILES['ini_file']['tmp_name']);
                    if ($iniData && isset($iniData['drive_info']['Model'])) {
                        $updateModelStmt = $pdo->prepare("UPDATE st_drives SET model_number = ? WHERE id = ?");
                        $updateModelStmt->execute([$iniData['drive_info']['Model'], $driveId]);
                    }
                    if ($iniData && isset($iniData['smart_data'])) {
                        $updateSmartStmt = $pdo->prepare("INSERT INTO st_smart (drive_id, output) VALUES (?, ?) ON DUPLICATE KEY UPDATE output = VALUES(output)");
                        $updateSmartStmt->execute([$driveId, $iniData['smart_data']]);
                    }
                }

                // 4. Mark all existing files for this drive as deleted
                $markDeletedStmt = $pdo->prepare("UPDATE st_files SET date_deleted = NOW() WHERE drive_id = ?");
                $markDeletedStmt->execute([$driveId]);
                $markedDeletedCount = $markDeletedStmt->rowCount();

                // 5. Process CSV file
                $csvHandle = fopen($csvTmpPath, 'r');
                if (!$csvHandle) {
                    throw new Exception("Failed to open uploaded CSV file.");
                }

                // Prepare the main UPSERT statement
                $sql = "INSERT INTO st_files (drive_id, partition_number, path, path_hash, filename, size, md5_hash, media_format, media_codec, media_resolution, ctime, mtime, file_category, is_directory, media_duration, exif_date_taken, exif_camera_model, product_name, product_version, exiftool_json, filetype, date_added, date_deleted) "
                     . "VALUES (:drive_id, :partition_number, :path, :path_hash, :filename, :size, :md5_hash, :media_format, :media_codec, :media_resolution, :ctime, :mtime, :file_category, :is_directory, :media_duration, :exif_date_taken, :exif_camera_model, :product_name, :product_version, :exiftool_json, :filetype, NOW(), NULL) "
                     . "ON DUPLICATE KEY UPDATE "
                     . "size=VALUES(size), md5_hash=VALUES(md5_hash), media_format=VALUES(media_format), media_codec=VALUES(media_codec), media_resolution=VALUES(media_resolution), ctime=VALUES(ctime), mtime=VALUES(mtime), file_category=VALUES(file_category), is_directory=VALUES(is_directory), media_duration=VALUES(media_duration), exif_date_taken=VALUES(exif_date_taken), exif_camera_model=VALUES(exif_camera_model), product_name=VALUES(product_name), product_version=VALUES(product_version), exiftool_json=VALUES(exiftool_json), filetype=VALUES(filetype), date_deleted=NULL, last_scan_id=NULL"; // last_scan_id can be improved later
                
                $upsertStmt = $pdo->prepare($sql);

                $header = fgetcsv($csvHandle); // Read header row to map columns
                $rowCount = 0;

                while (($row = fgetcsv($csvHandle)) !== false) {
                    if (count($header) !== count($row)) {
                        // Skip rows that don't match the header count, could be a blank line
                        continue;
                    }
                    $fileData = array_combine($header, $row);

                    // Explicitly bind values for clarity and safety
                    $upsertStmt->bindValue(':drive_id', $driveId, PDO::PARAM_INT);
                    $upsertStmt->bindValue(':partition_number', $fileData['partition_number'], PDO::PARAM_INT);
                    $upsertStmt->bindValue(':path', $fileData['path']);
                    $upsertStmt->bindValue(':path_hash', $fileData['path_hash']);
                    $upsertStmt->bindValue(':filename', $fileData['filename']);
                    $upsertStmt->bindValue(':size', $fileData['size']);
                    $upsertStmt->bindValue(':md5_hash', $fileData['md5_hash'] ?: null);
                    $upsertStmt->bindValue(':media_format', $fileData['media_format'] ?: null);
                    $upsertStmt->bindValue(':media_codec', $fileData['media_codec'] ?: null);
                    $upsertStmt->bindValue(':media_resolution', $fileData['media_resolution'] ?: null);
                    $upsertStmt->bindValue(':ctime', $fileData['ctime']);
                    $upsertStmt->bindValue(':mtime', $fileData['mtime']);
                    $upsertStmt->bindValue(':file_category', $fileData['file_category'] ?: null);
                    $upsertStmt->bindValue(':is_directory', $fileData['is_directory'], PDO::PARAM_INT);
                    $upsertStmt->bindValue(':media_duration', $fileData['media_duration'] ?: null);
                    $upsertStmt->bindValue(':exif_date_taken', $fileData['exif_date_taken'] ?: null);
                    $upsertStmt->bindValue(':exif_camera_model', $fileData['exif_camera_model'] ?: null);
                    $upsertStmt->bindValue(':product_name', $fileData['product_name'] ?: null);
                    $upsertStmt->bindValue(':product_version', $fileData['product_version'] ?: null);
                    $upsertStmt->bindValue(':exiftool_json', $fileData['exiftool_json'] ?: null);
                    $upsertStmt->bindValue(':filetype', $fileData['filetype'] ?: null);

                    $upsertStmt->execute();
                    $rowCount++;
                }

                fclose($csvHandle);
                $pdo->commit();

                $successMessage = "Import successful! Processed {$rowCount} file records for drive with serial {$serialFromDb} (ID: {$driveId}).";

            } catch (Exception $e) {
                if ($pdo->inTransaction()) {
                    $pdo->rollBack();
                }
                $errorMessage = "An error occurred during the import process: " . $e->getMessage();
            }
        }
    }
}

?>

<div class="container">
    <h2>Import External Scan Data</h2>
    <p>Upload the `.csv` and `.ini` files generated by the `scan_drive.ps1` script.</p>
    <p>The filename of the CSV file must be the serial number of the drive (e.g., `A04178218.csv`).</p>

    <?php if ($errorMessage): ?>
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> <?= htmlspecialchars($errorMessage) ?>
        </div>
    <?php endif; ?>

    <?php if ($successMessage): ?>
        <div class="alert alert-success" role="alert">
            <?= htmlspecialchars($successMessage) ?>
        </div>
    <?php endif; ?>

    <form action="import_csv.php" method="post" enctype="multipart/form-data" class="mt-4 import-form">
        
        <div class="form-group">
            <label for="drive_id"><b>Target Drive (Required)</b></label>
            <select class="form-control" id="drive_id" name="drive_id" required>
                <option value="">-- Select a Drive --</option>
                <?php foreach ($allDrives as $drive): ?>
                    <option value="<?= htmlspecialchars($drive['id']) ?>">
                        <?= htmlspecialchars($drive['an_serial'] . ' - ' . $drive['name'] . ' (' . $drive['serial'] . ')') ?>
                    </option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="form-group">
            <label for="csv_file"><b>Scan CSV File (Required)</b></label>
            <input type="file" class="form-control" id="csv_file" name="csv_file" accept=".csv" required>
        </div>

        <div class="form-group">
            <label for="ini_file"><b>Drive Info INI File (Optional)</b></label>
            <input type="file" class="form-control" id="ini_file" name="ini_file" accept=".ini">
            <small class="form-text text-muted">Provides drive model and SMART data.</small>
        </div>

        <div class="form-actions">
            <button type="submit">Import Scan</button>
        </div>
    </form>

</div>

<style>
    .import-form {
        max-width: 800px;
    }
    .import-form .form-group {
        margin-bottom: 25px; /* Adds vertical space between form sections */
    }
    .import-form .form-actions {
        justify-content: flex-start;
    }
</style>

<?php
require_once 'footer.php';
?>
